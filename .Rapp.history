mbod600fd <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + rddns:BZT + rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt + rddns:microbe:BZT + rddns:BZT:Salt + rddns:microbe:Salt + microbe:Salt:BZT + rddns:microbe:BZT:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fd)
mbod600fdr1 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + rddns:BZT + #
						rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt + rddns:microbe:BZT +#
						rddns:BZT:Salt + rddns:microbe:Salt + microbe:Salt:BZT , #
						data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr1)
mbod600fdr2 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + rddns:BZT + #
						rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt + rddns:microbe:BZT +#
						rddns:BZT:Salt + microbe:Salt:BZT , #
						data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr2)
mbod600fdr3 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + rddns:BZT + #
						rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt + rddns:microbe:BZT +#
						rddns:BZT:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr3)
mbod600fdr4 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + rddns:BZT + #
						rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt + rddns:microbe:BZT, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr4)
mbod600fdr5 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + rddns:BZT + #
						rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr5)
mbod600fdr6 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe +#
						rddns:Salt + BZT:microbe + BZT:Salt + microbe:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr6)
mbod600fdr7 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe +#
						 BZT:microbe + BZT:Salt + microbe:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr7)
mbod600fdr8 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + BZT:microbe + microbe:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr8)
mbod600fdr9 <- MCMCglmm(lnod600 ~rddns +  microbe + BZT + Salt + rddns:microbe + microbe:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
pdf("~/Dropbox/salt BT round 2/dpixandOD_sigcats_rddens.pdf",width=9.5,height=3)#
par(mfrow=c(1,3))#
par(mar=c(4,4,2.5,1))#
par(oma=c(1,0,0,0))#
plot(dpix.mns~c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),xaxt="n",xlab="",ylab="", cex=2, xlim=c(1.5,5),#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)),#
		ylim=c(1000,5200))#
	arrows(c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),dpix.mns-dpix.ses,y1=dpix.mns+dpix.ses,length=0,#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), lwd=2)#
	axis(side=1, at=c(2,3),labels=c("disrupted","local"))#
	mtext("microbes",side=1,line=2.2)#
	mtext("change in Duckweed Area",side=2,line=2.5)#
	legend(3.25,5200,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n",#
		 fill = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)))#
	mtext("a)",side=3,adj=-0.25,line=1)#
plot(dpixrdmn~rdrd,pch=NA,ylab="",xlab="",ylim=c(-5000,15000))#biodat$area~biodat$loc#
	polygon(c(rd.s,rev(rd.s)), y=c(dpxng.hpdird[1,],rev(dpxng.hpdird[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(dpxng.mnrd~rd.s)	#
	points(dpixrdmn~rdrd,pch=16) #biodat$area~biodat$loc,pch=16, cex=0.5)#
	mtext("change in Duckweed Area",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("b)",side=3,adj=-0.25,line=1)#
plot(odrdmns~rdrd,pch=16,xlab="",ylab="",ylim=c(-2.5,-1.6))#
	polygon(c(rd.s,rev(rd.s)), y=c(odngRd.hpdis[1,],rev(odngRd.hpdis[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(odngRd.mns~rd.s,lwd=2)#
	mtext("ln(optical density) 600nm",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("c)",side=3,adj=-0.25,line=1)#
dev.off()
summary(mbod600fdr9)
mbod600fdr10 <- MCMCglmm(lnod600 ~rddns +  microbe + Salt + rddns:microbe + microbe:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600fdr10)
mbod600lc <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:microbe + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt + #
						loc:microbe:BZT + loc:BZT:Salt + loc:microbe:Salt + microbe:Salt:BZT + loc:microbe:BZT:Salt, data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)#
mbod600lcr1 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:microbe + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt + #
						loc:microbe:BZT + loc:BZT:Salt + loc:microbe:Salt + microbe:Salt:BZT , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lc)
summary(mbod600lcr1)
pdf("~/Dropbox/salt BT round 2/dpixandOD_sigcats_rddens.pdf",width=9.5,height=3)#
par(mfrow=c(1,3))#
par(mar=c(4,4,2.5,1))#
par(oma=c(0,2,0,0))#
plot(dpix.mns~c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),xaxt="n",xlab="",ylab="", cex=2, xlim=c(1.5,5),#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)),#
		ylim=c(1000,5200))#
	arrows(c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),dpix.mns-dpix.ses,y1=dpix.mns+dpix.ses,length=0,#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), lwd=2)#
	axis(side=1, at=c(2,3),labels=c("disrupted","local"))#
	mtext("microbes",side=1,line=2.2)#
	mtext("change in duckweed area",side=2,line=2.5)#
	legend(3.25,5200,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n",#
		 fill = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)))#
	mtext("a)",side=3,adj=-0.25,line=1)#
plot(dpixrdmn~rdrd,pch=NA,ylab="",xlab="",ylim=c(-5000,15000))#biodat$area~biodat$loc#
	polygon(c(rd.s,rev(rd.s)), y=c(dpxng.hpdird[1,],rev(dpxng.hpdird[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(dpxng.mnrd~rd.s)	#
	points(dpixrdmn~rdrd,pch=16) #biodat$area~biodat$loc,pch=16, cex=0.5)#
	mtext("change in duckweed area",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("b)",side=3,adj=-0.25,line=1)#
plot(odrdmns~rdrd,pch=16,xlab="",ylab="",ylim=c(-2.5,-1.6))#
	polygon(c(rd.s,rev(rd.s)), y=c(odngRd.hpdis[1,],rev(odngRd.hpdis[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(odngRd.mns~rd.s,lwd=2)#
	mtext("ln(optical density) 600nm",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("c)",side=3,adj=-0.25,line=1)#
dev.off()
pdf("~/Dropbox/salt BT round 2/dpixandOD_sigcats_rddens.pdf",width=9.5,height=3)#
par(mfrow=c(1,3))#
par(mar=c(4,4,2.5,1))#
par(oma=c(0,1,0,0))#
plot(dpix.mns~c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),xaxt="n",xlab="",ylab="", cex=2, xlim=c(1.5,5),#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)),#
		ylim=c(1000,5200))#
	arrows(c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),dpix.mns-dpix.ses,y1=dpix.mns+dpix.ses,length=0,#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), lwd=2)#
	axis(side=1, at=c(2,3),labels=c("disrupted","local"))#
	mtext("microbes",side=1,line=2.2)#
	mtext("change in duckweed area",side=2,line=2.5)#
	legend(3.25,5200,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n",#
		 fill = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)))#
	mtext("a)",side=3,adj=-0.25,line=1)#
plot(dpixrdmn~rdrd,pch=NA,ylab="",xlab="",ylim=c(-5000,15000))#biodat$area~biodat$loc#
	polygon(c(rd.s,rev(rd.s)), y=c(dpxng.hpdird[1,],rev(dpxng.hpdird[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(dpxng.mnrd~rd.s)	#
	points(dpixrdmn~rdrd,pch=16) #biodat$area~biodat$loc,pch=16, cex=0.5)#
	mtext("change in duckweed area",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("b)",side=3,adj=-0.25,line=1)#
plot(odrdmns~rdrd,pch=16,xlab="",ylab="",ylim=c(-2.5,-1.6))#
	polygon(c(rd.s,rev(rd.s)), y=c(odngRd.hpdis[1,],rev(odngRd.hpdis[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(odngRd.mns~rd.s,lwd=2)#
	mtext("ln(optical density) 600nm",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("c)",side=3,adj=-0.25,line=1)#
dev.off()
pdf("~/Dropbox/salt BT round 2/dpixandOD_sigcats_rddens.pdf",width=9.5,height=3)#
par(mfrow=c(1,3))#
par(mar=c(4,4,2.5,1))#
par(oma=c(0,1,0,0))#
plot(dpix.mns~c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),xaxt="n",xlab="",ylab="", cex=2, xlim=c(1.5,5),#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)),#
		ylim=c(1000,5200))#
	arrows(c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),dpix.mns-dpix.ses,y1=dpix.mns+dpix.ses,length=0,#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), lwd=2)#
	axis(side=1, at=c(2,3),labels=c("disrupted","local"))#
	mtext("microbes",side=1,line=2.2,at=2.65)#
	mtext("change in duckweed area",side=2,line=2.5)#
	legend(3.25,5200,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n",#
		 fill = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)))#
	mtext("a)",side=3,adj=-0.25,line=1)#
plot(dpixrdmn~rdrd,pch=NA,ylab="",xlab="",ylim=c(-5000,15000))#biodat$area~biodat$loc#
	polygon(c(rd.s,rev(rd.s)), y=c(dpxng.hpdird[1,],rev(dpxng.hpdird[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(dpxng.mnrd~rd.s)	#
	points(dpixrdmn~rdrd,pch=16) #biodat$area~biodat$loc,pch=16, cex=0.5)#
	mtext("change in duckweed area",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("b)",side=3,adj=-0.25,line=1)#
plot(odrdmns~rdrd,pch=16,xlab="",ylab="",ylim=c(-2.5,-1.6))#
	polygon(c(rd.s,rev(rd.s)), y=c(odngRd.hpdis[1,],rev(odngRd.hpdis[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(odngRd.mns~rd.s,lwd=2)#
	mtext("ln(optical density) 600nm",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("c)",side=3,adj=-0.25,line=1)#
dev.off()
pdf("~/Dropbox/salt BT round 2/dpixandOD_sigcats_rddens.pdf",width=9.5,height=3)#
par(mfrow=c(1,3))#
par(mar=c(4,4,2.5,1))#
par(oma=c(0,1,0,0))#
plot(dpix.mns~c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),xaxt="n",xlab="",ylab="", cex=2, xlim=c(1.5,5),#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)),#
		ylim=c(1000,5200))#
	arrows(c(2,2.1,2.2,2.3,3,3.1,3.2,3.3),dpix.mns-dpix.ses,y1=dpix.mns+dpix.ses,length=0,#
		col = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)), lwd=2)#
	axis(side=1, at=c(2,3),labels=c("disrupted","local"))#
	mtext("microbes",side=1,line=2.2,at=2.5)#
	mtext("change in duckweed area",side=2,line=2.5)#
	legend(3.25,5200,c("Neither","1 mg/L BZT","0.8 g/L Salt","Both"), bty="n",#
		 fill = c(rgb(0,0,0),rgb(0,0,0.75),rgb(0.75,0,0),rgb(0.75,0,0.75)))#
	mtext("a)",side=3,adj=-0.25,line=1)#
plot(dpixrdmn~rdrd,pch=NA,ylab="",xlab="",ylim=c(-5000,15000))#biodat$area~biodat$loc#
	polygon(c(rd.s,rev(rd.s)), y=c(dpxng.hpdird[1,],rev(dpxng.hpdird[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(dpxng.mnrd~rd.s)	#
	points(dpixrdmn~rdrd,pch=16) #biodat$area~biodat$loc,pch=16, cex=0.5)#
	mtext("change in duckweed area",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("b)",side=3,adj=-0.25,line=1)#
plot(odrdmns~rdrd,pch=16,xlab="",ylab="",ylim=c(-2.5,-1.6))#
	polygon(c(rd.s,rev(rd.s)), y=c(odngRd.hpdis[1,],rev(odngRd.hpdis[2,])), col=rgb(0,0,0,alpha=0.5), border=NA)#
	lines(odngRd.mns~rd.s,lwd=2)#
	mtext("ln(optical density) 600nm",side=2,line=2.5)#
	mtext("road density m/km^2",side=1,line=2.2)#
	mtext("c)",side=3,adj=-0.25,line=1)#
dev.off()
mbod600lcr2 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:microbe + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt + #
						loc:microbe:BZT + loc:BZT:Salt + loc:microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lc)
summary(mbod600lc1)
summary(mbod600lcr1)
summary(mbod600lcr2)
mbod600lcr3 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:microbe + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt + #
						loc:microbe:BZT + loc:microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr3)
mbod600lcr4 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:microbe + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt + #
						 loc:microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr4)
mbod600lcr5 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:microbe + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr5)
mbod600lcr6 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:BZT + loc:Salt + BZT:microbe + BZT:Salt + microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr6)
mbod600lcr7 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:BZT + BZT:microbe + BZT:Salt + microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr7)
summary(mbod600fdr10)
mbod600lcr8 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:BZT + BZT:microbe + microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr8)
mbod600lcr9 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt + loc:BZT + microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr9)
mbod600lcr10 <- MCMCglmm(lnod600 ~loc +  microbe + BZT + Salt+ microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr10)
mbod600lcr11 <- MCMCglmm(lnod600 ~loc +  microbe + Salt+ microbe:Salt , data=biodat,verbose=F, nitt=50000,thin=10,burnin=1000)
summary(mbod600lcr11)
mbod600fdr10 <- MCMCglmm(lnod600 ~rddns +  microbe + Salt + rddns:microbe + microbe:Salt, data=biodat,verbose=F, nitt=100000,thin=10,burnin=10000)
summary(mbod600fdr10)
frondsbytime <- data.frame(fronds = c(biodat$X0.FN,biodat$X2.FN,biodat$X4.FN,biodat$X6.FN,biodat$X8.FN,biodat$X10.FN),#
							id = as.character(rep(1:nrow(biodat),times=6)), days= rep(c(0,3,5,7,9,11),each=nrow(biodat)),#
							BZT = rep(ifelse(biodat$BZT=="B",1,0),times=6), Salt = rep(ifelse(biodat$Salt=="S",1,0), times=6), #
							microbe = rep(ifelse(biodat$microbe=="+",1,0),times=6), loc = rep(biodat$loc,times=6),#
							rddns = rep(biodat$rddns,times=6), genotype = rep(biodat$genotype,times=6) )
dim(frondsbytime)
head(frondsbytime)
tail(frondsbytime)
mbgrTIMEidintONLY <- MCMCglmm(fronds~ days + days:loc +  days:microbe + days:BZT + days:Salt +#
					 days:loc:microbe + days:loc:BZT + days:loc:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
						days:loc:microbe:BZT + days:loc:BZT:Salt + days:loc:microbe:Salt + days:microbe:Salt:BZT + days:loc:microbe:BZT:Salt , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)#
mbgrTIMEidintONLYr1 <- MCMCglmm(fronds~ days + days:loc +  days:microbe + days:BZT + days:Salt +#
					 days:loc:microbe + days:loc:BZT + days:loc:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
						days:loc:microbe:BZT + days:loc:BZT:Salt + days:loc:microbe:Salt + days:microbe:Salt:BZT  , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)
summary(mbgrTIMEidintONLY)
summary(mbgrTIMEidintONLYr1)
mbgrTIMEidintONLYr2 <- MCMCglmm(fronds~ days + days:loc +  days:microbe + days:BZT + days:Salt +#
					 days:loc:microbe + days:loc:BZT + days:loc:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
					days:loc:BZT:Salt + days:loc:microbe:Salt + days:microbe:Salt:BZT  , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)
summary(mbgrTIMEidintONLYr2)
mbgrTIMEidintONLYr3 <- MCMCglmm(fronds~ days + days:loc +  days:microbe + days:BZT + days:Salt +#
					 days:loc:microbe + days:loc:BZT + days:loc:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
					days:loc:microbe:Salt + days:microbe:Salt:BZT  , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)
summary(mbgrTIMEidintONLYr3)
mbgrTIMEidintONLYr4 <- MCMCglmm(fronds~ days + days:loc +  days:microbe + days:BZT + days:Salt +#
					 days:loc:microbe + days:loc:BZT + days:loc:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
					 days:microbe:Salt:BZT  , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)
mbgrTIMEidintONLYr5 <- MCMCglmm(fronds~ days + days:loc +  days:microbe + days:BZT + days:Salt +#
					  days:loc:BZT + days:loc:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
					 days:microbe:Salt:BZT  , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)#
#
 mbgrTIMEidintONLYRD <- MCMCglmm(fronds~ days + days:rddns +  days:microbe + days:BZT + days:Salt +#
					 days:rddns:microbe + days:rddns:BZT + days:rddns:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
						days:rddns:microbe:BZT + days:rddns:BZT:Salt + days:rddns:microbe:Salt + days:microbe:Salt:BZT + days:rddns:microbe:BZT:Salt , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)#
 mbgrTIMEidintONLYRDr1 <- MCMCglmm(fronds~ days + days:rddns +  days:microbe + days:BZT + days:Salt +#
					 days:rddns:microbe + days:rddns:BZT + days:rddns:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
						days:rddns:microbe:BZT + days:rddns:BZT:Salt + days:rddns:microbe:Salt + days:microbe:Salt:BZT , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)#
 mbgrTIMEidintONLYRDr2 <- MCMCglmm(fronds~ days + days:rddns +  days:microbe + days:BZT + days:Salt +#
					 days:rddns:microbe + days:rddns:BZT + days:rddns:Salt + days:BZT:microbe + days:BZT:Salt + days:microbe:Salt + #
						days:rddns:BZT:Salt + days:rddns:microbe:Salt + days:microbe:Salt:BZT , #
				random = ~ id, #
				data=frondsbytime,verbose=F, nitt=100000,thin=10,burnin=1000,pr=T)#
#stop
summary(mbgrTIMEidintONLYr4)
summary(mbgrTIMEidintONLYr5)
summary(mbgrTIMEidintONLYRD)
summary(mbgrTIMEidintONLYRDr1)
summary(mbgrTIMEidintONLYRDr2)
summary(mbgrTIMEidintONLYRDr3)
rm(list=ls())
# library(tidyverse)#
#devtools::install_github("jbisanz/qiime2R")#
library(qiime2R)#
library(geosphere)#
library(ade4)#
library(CCA) #for CCA#
library(SDMTools) #this is just for legend gradients#
# install.packages("remotes")#
# remotes::install_version("SDMTools", "1.1-221")#
library(MCMCglmm)#
library(phangorn)#descendants #
library(ggtree)#
library(ggnewscale) #for ggtree#
#
#generic, useful functions#
#
range01 <- function(x) {#
	newnums=(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))#
	return(newnums)#
} #
#
HPDi <- function(vect,prob) {#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
} #shortcut for coda HPDinterval #
#
bufferX <- function(x,p) { #
	r<- range(x,na.rm=T)#
	add <- c(-1,1)*p*(r[2]-r[1])#
	return(r+add)#
	}	#
#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#################################################
####READ IN MICROBIOME DATA, BIOOLOGICAL DATA, COLLECTION INFO, PROCESS#
#################################################
#
feat.tab.qz 	<- read_qza("~/Lmb_deb_nostrep_sepkept_BZSandM_table_ff.qza")#filtered to both BZT and in the phylogeny (not sure how much this last filter tosses)	#
feat.tax.qz 	<- read_qza("~/Lemna_microbiome_deblurtaxonomy_402.qza")##NOT FILTERED TO kept features, or even to rm streptophyta, so have to do that here#
bal.phy.qz	<- read_qza("~/balances_tree_402_BZT.qza")$data#
hier.phy 	<- read_qza("~/hierarchy_tree_402_BZT.qza")$data #
bal.phy 	<- bal.phy.qz[,order(colnames(bal.phy.qz))] #
feat.tab 	<- feat.tab.qz$data[,order(colnames(feat.tab.qz$data))] #
feat.tax 	<- feat.tax.qz$data#
#make proportion:#
feat.prop <- feat.tab#
ftsums <- colSums(feat.tab)#
for(i in 1:ncol(feat.tab)){feat.prop[,i] <- feat.prop[,i]/ftsums[i]}#
#split tax info into columns#
taxlevs <- sapply(1:nrow(feat.tax), function(z) strsplit(as.character(feat.tax$Taxon[z]),split="; "))#
tax <- matrix(NA,ncol=7,nrow=nrow(feat.tax))#
for(i in 1:nrow(tax)){ tax[i,1:length(taxlevs[[i]])]<- taxlevs[[i]]}#
rownames(tax) <- as.character(feat.tax$Feature.ID)#
mastertab.s <- feat.prop#
mastertax.s <- tax[rownames(mastertab.s),]#
#checks for chloroplast (of land plants, don't remove chloroplast of microbes!) and mitochondria#
length(which(mastertax.s[,4]=="o__Streptophtya")) #if there were any of these, that would indicate land/complex plants#
length(which(mastertax.s[,3]=="c__Chloroplast")) #these contain many things we want! diatoms, single-celled algae. #
#these would all be a problem. (no easy option to separate fungi, etc, from Lemna minor/animal contaminants -- insects in frozen samples, etc)#
length(which(mastertax.s[,5]=="f__mitochondria"))#
length(which(mastertax.s[,5]=="f__mitochondria"))#
##read sample info, and sort accordingly#
sampleinfo 		<- read.csv("~/Dropbox/salt BT round 2/Lemna_microbiome_barebones_meta_inbzt2_wkmcC.tsv",sep="\t",header=T, stringsAsFactors=F) #
newcolnamesM <- sapply(colnames(mastertab.s), function(x) sampleinfo$bzs2[sampleinfo$sample.id==x])#
colnames(mastertab.s)<- newcolnamesM#
colnames(bal.phy) <- newcolnamesM#
#
#biological measurements#
biodat <- read.csv("~/Dropbox/salt BT round 2/biodat.csv",header=T)#
#
#bzt transf data#
transf <- read.csv("~/Dropbox/salt BT round 2/BZS2_transformation.csv",stringsAsFactors=F,header=T)#
transf$Genotype[transf$Genotype=="Cnp"] <- "CnP" #to match other files#
table(transf$Genotype)#
#previous experiment data#
expAtransf.1 <- read.csv("~/Dropbox/salt BT round 2/experiment A products.csv",stringsAsFactors=F,header=T)#
#
#create identifiers to merge bio/transformation/microbiome information#
arabicplate <- as.numeric(sapply(1:nrow(biodat), function(z) strsplit(biodat$plate[z],"[.]")[[1]][1]))#
splitpair <- sapply(1:nrow(biodat), function(z) strsplit(biodat$plate[z],"[.]")[[1]][2]) #
arabicpair <- ifelse(splitpair=="I",1,2)#
same_sampleid <- paste(arabicplate,arabicpair,paste(biodat$row,biodat$column,sep=""),sep=".")#
# subset#
subbio <- biodat[biodat$genotype%in%transf$Genotype,]#
subbioexact <- t(sapply(1:length(transf$id), function(id) biodat[which(same_sampleid == transf$id[id]),]))#
#sorted idenically to transf object#
subbioexactdf <- data.frame(matrix(ncol=ncol(biodat),nrow=nrow(transf)))#
for(i in 1:ncol(biodat)){#
	subbioexactdf[,i] <- unlist(subbioexact[,i])#
}#
colnames(subbioexactdf) <- colnames(biodat)#
#
#### Subset, sort, merge.#
#now subset inocula abundance data to only the genotypes for which there are transformation products#
submastertab <- mastertab.s[,colnames(mastertab.s)%in%transf$Genotype]#
	submastertab.s <- submastertab[-(which(rowSums(submastertab) ==0)),]#
	submastertax <- mastertax.s[rownames(submastertab.s),]#
subbalphy <- bal.phy[,colnames(bal.phy)%in%transf$Genotype]#
#get transformation products matrix by genotype, transform via log when appropriate#
products <- transf[,c(11,16:23)]#
productsAA <- cbind(transf[,c(11,17)], rowSums(transf[,c(16,18)]), transf[,19:23])#
colnames(productsAA) <- c( colnames(transf)[c(11,17)],"BZTa+BZTaa" , colnames(transf)[19:23] )#
logprodsAA <- sapply(1:ncol(productsAA), function(x) log(productsAA[,x] + min(productsAA[productsAA[,x]>0,x])))#
colnames(logprodsAA) <- colnames(productsAA)#
chooselogprodsAA <- sapply(1:ncol(productsAA), function(z) shapiro.test(productsAA[,z])$statistic < 0.7 & shapiro.test(logprodsAA[,z])$statistic > shapiro.test(productsAA[,z])$statistic )#
mixAA <- productsAA#
mixAA[,which(chooselogprodsAA)] <- logprodsAA[,chooselogprodsAA]#
mixAAtrt <- cbind(Genotype=transf$Genotype, Salt=transf$Salt, Microbes = transf$Microbes, rddens =transf$density, km= transf$km, mixAA)#
colnames(mixAAtrt)[colnames(mixAAtrt)=="BZTa+BZTaa"] <- "BZTaplusBZTaa"#
mixAAtrt$OD600 <- subbioexactdf$od_dat.od600#
mixAAtrt$deltapix <- subbioexactdf$deltapix#
mixAAtrtbio <- mixAAtrt[!is.na(mixAAtrt$OD600),]#
mixAAtrt$micrnum <- as.numeric(as.factor(mixAAtrt$Microbes))-1 #
#genotyp biomeans by trts#
biogenotrt <- sapply(sort(unique(biodat$genotype)), function(g) sapply(c(9:16,18:28,42), function(p) tapply(biodat[biodat$genotype==g,p],paste(biodat$BZT,biodat$Salt,biodat$microbe)[biodat$genotype==g],mean,na.rm=T) )) #
#trtmnt order is all 0 bzt before all + bzt; then all 0 s before + s, then all - before +, so 0 0 -; 0 0 +, 0S - ....#
#traits are grouped in rows first 8 rows are x0.FN, order is x0.FN through x10.FN, od600 od750, then all imageJ columns (area, perim, mean...)
BZTremtrt <- MCMCglmm(conc_corrected~ Salt +rddens   ,data=mixAAtrt,nitt=100000,verbose=F) #salt neg and rddens pos#
solbrt <- BZTremtrt$Sol#
predBRTm <- sapply(rddens.s, function(z) mean(solbrt[,1] + solbrt[,2]*0.5 + solbrt[,3]*z) )#
predBRTi <- sapply(rddens.s, function(z) HPDi(solbrt[,1] + solbrt[,2]*0.5 + solbrt[,3]*z, 0.9) )
rddens.s <- seq(from=min(mixAAtrt$rddens),to=max(mixAAtrt$rddens),length.out=1000)#
dpix.s <- seq(from=min(mixAAtrtbio$deltapix),to=max(mixAAtrtbio$deltapix),length.out=1000)#
od.s <- seq(from=min(mixAAtrtbio$OD600),to=max(mixAAtrtbio$OD600),length.out=1000)
BZTremtrt <- MCMCglmm(conc_corrected~ Salt +rddens   ,data=mixAAtrt,nitt=100000,verbose=F) #salt neg and rddens pos#
solbrt <- BZTremtrt$Sol#
predBRTm <- sapply(rddens.s, function(z) mean(solbrt[,1] + solbrt[,2]*0.5 + solbrt[,3]*z) )#
predBRTi <- sapply(rddens.s, function(z) HPDi(solbrt[,1] + solbrt[,2]*0.5 + solbrt[,3]*z, 0.9) )
summary(BZTremtrt)
BZTdp <- (MCMCglmm(conc_corrected~deltapix ,data=mixAAtrtbio,nitt=100000,verbose=F))#pos#
solbpx <- BZTdp$Sol#
predBpxm <- sapply(dpix.s, function(z) mean(solbpx[,1] + solbpx[,2]*z) )#
predBpxi <- sapply(dpix.s, function(z) HPDi(solbpx[,1] + solbpx[,2]*z, 0.9))
summary(BZTdp)
BZTaatrt <- (MCMCglmm(BZTaplusBZTaa~ rddens  ,data=mixAAtrt,nitt=100000,verbose=F)) #rddens pos#
solbaat <- BZTaatrt$Sol#
predBATm <- sapply(rddens.s, function(z) mean(solbaat[,1] + solbaat[,2]*z) )#
predBATi <- sapply(rddens.s, function(z) HPDi(solbaat[,1] + solbaat[,2]*z, 0.9) )
summary(BZTaatrt)
baaod <-(MCMCglmm(BZTaplusBZTaa~ OD600 ,data=mixAAtrtbio,nitt=100000,verbose=F)) #pos#
solbaaod <- baaod$Sol#
predBaom <- sapply(od.s, function(z) mean(solbaaod[,1] + solbaaod[,2]*z) )#
predBaoi <- sapply(od.s, function(z) HPDi(solbaaod[,1] + solbaaod[,2]*z, 0.9))
summary(baaod)
dim(mixAAtrt)
dim(mixAAtrtbio)
head(mixAAtrt)
#refit#
glypo <- (MCMCglmm(scale(glycosylatedBZT)~deltapix + OD600,data=mixAAtrtbio,nitt=100000,verbose=F))#pos#
solgpo <- glypo$Sol#
predGpxm <- sapply(dpix.s, function(z) mean(solgpo[,1] + solgpo[,2]*z + solgpo[,3]*mean(mixAAtrtbio$OD600)) )*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)#
predGpxi <- sapply(dpix.s, function(z) HPDi(solgpo[,1] + solgpo[,2]*z + solgpo[,3]*mean(mixAAtrtbio$OD600), 0.9))*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)#
predGodm <- sapply(od.s, function(z) mean(solgpo[,1] + solgpo[,2]*mean(mixAAtrtbio$deltapix) + solgpo[,3]*z) )*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)#
predGodi <- sapply(od.s, function(z) HPDi(solgpo[,1] + solgpo[,2]* mean(mixAAtrtbio$deltapix)+ solgpo[,3]*z, 0.9))*sd(mixAAtrtbio$glycosylatedBZT) + mean(mixAAtrtbio$glycosylatedBZT)
head(scale(mixAAtrt$glycosylatedBZT))
head((mixAAtrt$glycosylatedBZT))
summary(glypo)
mbod <-(MCMCglmm(scale(methylBZT)~ OD600 ,data=mixAAtrtbio,nitt=100000,verbose=F)) #pos#
solmbod <- mbod$Sol#
predMBom <- sapply(od.s, function(z) mean(solmbod[,1] + solmbod[,2]*z) )*sd(mixAAtrtbio$methylBZT) + mean(mixAAtrtbio$methylBZT)#
predMBoi <- sapply(od.s, function(z) HPDi(solmbod[,1] + solmbod[,2]*z, 0.9))*sd(mixAAtrtbio$methylBZT) + mean(mixAAtrtbio$methylBZT)
summary(mbod)
moxBtrt <- (MCMCglmm(methoxyBZT~ Salt +rddens  ,data=mixAAtrt,nitt=100000,verbose=F))# salt neg and rddens neg #
solmBt <- moxBtrt$Sol#
predMBTm <- sapply(rddens.s, function(z) mean(solmBt[,1] + solmBt[,2]*0.5 + solmBt[,3]*z) ) #
predMBTi <- sapply(rddens.s, function(z) HPDi(solmBt[,1] + solmBt[,2]*0.5 + solmBt[,3]*z, 0.9) )
a3ptrt <- (MCMCglmm(amino_3_phenol~  Salt +rddens  ,data=mixAAtrt,nitt=100000,verbose=F)) #salt neg and rddens neg#
sola3pt <- a3ptrt$Sol#
predAPTm <- sapply(rddens.s, function(z) mean(sola3pt[,1] + sola3pt[,2]*0.5 + sola3pt[,3]*z) )#
predAPTi <- sapply(rddens.s, function(z) HPDi(sola3pt[,1] + sola3pt[,2]*0.5 + sola3pt[,3]*z, 0.9) )
summary(moxBtrt)
summary(a3ptrt)
pztrt <- (MCMCglmm(phenazine ~  rddens ,data=mixAAtrt,nitt=100000,verbose=F)) #rddens NEG#
solpzt <- pztrt$Sol#
predPZTm <- sapply(rddens.s, function(z) mean(solpzt[,1] + solpzt[,2]*z) )#
predPZTi <- sapply(rddens.s, function(z) HPDi(solpzt[,1] + solpzt[,2]*z, 0.9) )
pzod <- (MCMCglmm(phenazine~ OD600 ,data=mixAAtrtbio,nitt=100000,verbose=F))##
solpzod <- pzod$Sol#
predpzodm <- sapply(od.s, function(z) mean(solpzod[,1] + solpzod[,2]*z) )#
predpzodi <- sapply(od.s, function(z) HPDi(solpzod[,1] + solpzod[,2]*z, 0.9))
summary(pztrt)
summary(pzod)
summary(MCMCglmm(scale(aniline)~deltapix + OD600 + OD600:deltapix,data=mixAAtrtbio,nitt=50000,verbose=F))#
summary(MCMCglmm(scale(aniline)~deltapix + OD600,data=mixAAtrtbio,nitt=50000,verbose=F))
summary(MCMCglmm(scale(aniline)~deltapix + OD600 + OD600:deltapix,data=mixAAtrtbio,nitt=100000,verbose=F))
summary(MCMCglmm(scale(aniline)~deltapix + OD600 + OD600:deltapix,data=mixAAtrtbio,nitt=200000,verbose=F))
summary(MCMCglmm(scale(aniline)~deltapix + OD600 + OD600:deltapix,data=mixAAtrtbio,nitt=400000,verbose=F))
summary(MCMCglmm(scale(aniline)~deltapix + OD600,data=mixAAtrtbio,nitt=400000,verbose=F))
summary(MCMCglmm(scale(aniline)~deltapix,data=mixAAtrtbio,nitt=400000,verbose=F))
summary(BZTremtrt)
head(mixAAtrt)
cor(mixAAtrt[,6:12])
cor(mixAAtrt[,6:13])
range(mixAAtrt$conc_corrected)
head(transf)
molsrem <- transf$conc.corrected*0.001/119.12
head(molsrem)
molsrem <- transf$conc_corrected*0.001/119.12
head(molsrem)
dim(transf)
haed
head(molstransf/transf[17,19:23]#
)
molsrem <- transf$conc_corrected*0.001/119.12#
ogmols <- 0.001/119.12#
molstransf <- ogmols - molsrem
head(molstransf/transf[17,19:23]#
)
head(molstransf/transf[,c(17,19:23)]#
)
head(molstransf)
head(transf[,c(17,19:23)]/molstransf#
)
applyhead(transf[,c(17,19:23)]/molstransf#
)
apply(transf[,c(17,19:23)]/molstransf#
margin=2,range)
apply(transf[,c(17,19:23)]/molstransf,#
margin=2,range)
apply(transf[,c(17,19:23)]/molstransf,#
margin=2,FUN=range)
apply(transf[,c(17,19:23)]/molstransf,#
MARGIN=2,FUN=range)
apply(transf[,c(17:23)]/molstransf,#
MARGIN=2,FUN=range)
rowSums(transf[,c(17:23)]/molstransf)
range(rowSums(transf[,c(17:23)]/molstransf))
range(transf$conc_corrected)
1-range(transf$conc_corrected)
molsog
ogmols
1000*.002
molsrem <- transf$conc_corrected*0.001*0.002/119.12 #2 mL of 1 mg/L #
ogmols <- 0.001*0.002/119.12#
molstransf <- ogmols - molsrem
ogmols
molsrem <- transf$conc_corrected*0.001*0.0025/119.12 #2 mL of 1 mg/L #
ogmols <- 0.001*0.0025/119.12
ogmols
ogmols*(1/.002)
ogmols*(1/.0025)
ogmols <- 0.001*0.0025/119.12
ogmols
ogmols <- 0.001*(0.0025/1)/119.12
ogmols <- 0.001*0.0035/119.12
ogmols
ogmols*3
ogmols <- 0.001*0.0025/119.12
ogmols
ogmols*3
head(transf[,17:23])
rowSums(transf[,17:23])
molstransf <- ogmols - molsrem
molstransf/rowSums(transf[,17:23])
rowSums(transf[,17:23])/molstransf
rowSums(transf[,17:23])/molstransf*100
range(rowSums(transf[,17:23])/molstransf*100)
percentineach <- transf[,c(17,19:23)]/molstransf
colSums(transf[,c(17,19:23)])/(molstransf*nrow(transf))
colSums(transf[,c(17,19:23)])
colSums(transf[,c(17,19:23)])/(ogmols*nrow(transf))
range(rowSums(transf[,c(17,19:23)])/molstransf)
colnames(transf)
molsrem <- transf$conc_corrected*0.001*0.0025/120 #2 mL of 1 mg/L #
ogmols <- 0.001*0.0025/120
ogmols
1000/2.5
mgperL <- sapply(17:23, function(z) molmassTPs*transf[,z]*(1000/2.5))  #mols per 2.5 mL * 1000/2.5
molmassTPs <- c(207,282,249 ,94,110,181, 134,150) #daltons from Zhu Yu thesis, table 8
mgperL <- sapply(17:23, function(z) molmassTPs*transf[,z]*(1000/2.5))  #mols per 2.5 mL * 1000/2.5
str(mgperL)
head(mgperL)
mgperL <- sapply(17:23, function(z) molmassTPs*transf[,z]*(1000/2.5))  #molarmass * mols per 2.5 mL * 1000/2.5 = grams /L
head(mgperL)
4.21e4
head(mgperL*c(10,1,100,100,1,1))
head(mgperL*c(10,1,100,1,100,1,1))
head(transf)
colnames(transf)[17:23]
molsrem <- transf$conc_corrected*0.001*0.0025/120 #2 mL of 1 mg/L #
ogmols <- 0.001*0.0025/120#
molstransf <- ogmols - molsrem#
percentineach <- transf[,c(16:23)]/molstransf#
 colSums(transf[,c(16:23)])/(ogmols*nrow(transf))#
range(rowSums(transf[,c(16:23)])/molstransf)#
#molar masses: bzta, glybzt, bztaa, anilin, a3p, phen, mbzt, moxybz#
molmassTPs <- c(207,282,249 ,94,110,181, 134,150) #daltons from Zhu Yu thesis, table 8#
mgperL <- sapply(16:23, function(z) molmassTPs*transf[,z]*(1000/2.5))  #molarmass * mols per 2.5 mL * 1000/2.5 = grams /L#
#ecosar units: mg/L bzt is 40.7
head(mgperL)
molarmassTPs
molamassTPs
molmassTPs
mgperL <- sapply(1:8, function(z) molmassTPs[z]*transf[,z+15]*(1000/2.5))  #molarmass * mols per 2.5 mL * 1000/2.5 = grams /L
head(mgperL)
fishLC50 <- c(3.66e6,4.21e4,1.61e5,40.3,11.4,80.9,652,45.6)#
toxunits <- rowSums(sapply(1:8, function(z), mgperL[,z]/fishLC50[z]))
fishLC50 <- c(3.66e6,4.21e4,1.61e5,40.3,11.4,80.9,652,45.6)#
toxunits <- rowSums(sapply(1:8, function(z) mgperL[,z]/fishLC50[z]))
range(toxunits)
hist(toxunits)
shapiro.test(toxunits)
shapiro.test(log(toxunits))
dim(mixAAtr)
dim(mixAAtrt)
dim(transf)
mixAAtrt$logtoxu <- log(toxicunits)#
mixAAtrtbio <- mixAAtrt[!is.na(mixAAtrt$OD600),]#
mixAAtrt$micrnum <- as.numeric(as.factor(mixAAtrt$Microbes))-1
mixAAtrt$logtoxu <- log(toxunits)#
mixAAtrtbio <- mixAAtrt[!is.na(mixAAtrt$OD600),]#
mixAAtrt$micrnum <- as.numeric(as.factor(mixAAtrt$Microbes))-1
summary(MCMCglmm(logtoxu ~Microbes + Salt +rddens + rddens:Salt + rddens:Microbes + Microbes:Salt+ rddens:Microbes:Salt,data=mixAAtrt,nitt=50000,verbose=F))
summary(MCMCglmm(logtoxu ~Microbes + Salt +rddens + rddens:Salt + rddens:Microbes + Microbes:Salt,data=mixAAtrt,nitt=50000,verbose=F))
summary(MCMCglmm(logtoxu ~Microbes + Salt +rddens + rddens:Microbes + Microbes:Salt,data=mixAAtrt,nitt=50000,verbose=F))
summary(MCMCglmm(logtoxu ~Microbes + Salt +rddens + Microbes:Salt,data=mixAAtrt,nitt=50000,verbose=F))
summary(MCMCglmm(logtoxu ~Microbes + Salt +rddens,data=mixAAtrt,nitt=50000,verbose=F))
summary(MCMCglmm(logtoxu ~Microbes +rddens,data=mixAAtrt,nitt=50000,verbose=F))
summary(MCMCglmm(logtoxu ~rddens,data=mixAAtrt,nitt=50000,verbose=F))
help(chisq.test)
71*.88
62/71
63/71
62/71
library(UpSetR) #for set plots#
library(MCMCglmm) #for models#
library(grDevices) #for color#
#
HPDi <- function(vect,prob){#
	int <- HPDinterval(as.mcmc(vect),prob=prob)#
	return(int)#
}#
#
invlogistic <- function(x){exp(x)/(1+ exp(x))}#
std.error <- function(dat, na.rm=TRUE) {sd(dat,na.rm=na.rm)/sqrt(length(dat))}#defaults to na.rm=T#
#################################################################################
####read in data#
#################################################################################
# analyze WOS records for AjB lit review on influence of microbes plant phenology#
setwd("~/MicrobesAndPhenology/")#
#
# wos_recs <- read.csv("~/saved records WOS friday sep 11 2020 - WOS records.tsv",#
# 					sep="\t",stringsAsFactors=F,na.strings = c("NA",""))#
#
cwos_recs <- read.csv("saved records WOS friday sep 11 2020 - 500scoredWOSrecords.csv",#
					stringsAsFactors=F,na.strings = c("NA","")) #
# split_recs <- read.csv("trimmed RECORDS FOR SPLITTING v4.csv", #sep="\t",#
split_recs <- read.csv("saved records WOS friday sep 11 2020 - Split Records.csv", #sep="\t",#
					stringsAsFactors=F,na.strings = c("NA","")) #
split_recs$mating[which(is.na(split_recs$mating) & split_recs$WOS.relevance.rank==28) ] <- "unk" # mating system score of unknown was left out for one record#
split_recs_scr <- split_recs[!is.na(split_recs$direction.effect.split),] #
	#several records were not possible to score for effect direction; but were relevant to microbial effects on phenology#
#
#################################################################################
####Analysis of all broadly relevant records			#
#################################################################################
relevant <- cwos_recs$"Relevant..Y.N"=="y"#
PMo <- as.numeric(as.factor(cwos_recs$otherPhenMicrLink=="y")) -1 #other link between phenology, plants and microbes#
MiP <- as.numeric(as.factor(cwos_recs$MicrobesAffectPhenology=="y")) -1 # microbes influence plant phenology#
#
table(relevant)#
table(PMo)#
table(MiP)#
table(cwos_recs$anyeffect)#
#
wos_rel <- cwos_recs[which(relevant),]#
wos_MiP <- cwos_recs[which(MiP==1),]#
#
taxand <- gsub("; ", wos_rel$micrtax,replacement="&")#
locand <- gsub("; ", wos_rel$micrloc,replacement="&")#
phenand <- gsub("; ", wos_rel$phentrait_of,replacement="&")#
#replace abbreviation "prb" from phenand#
phenand[phenand == "germination prb"] <- "germination probability"#
phenand[phenand == "germination time&germination prb"] <- "germination time&germination probability"#
phenand[phenand == "germination prb&flowering time"] <- "germination probability&flowering time"
split_recs$anyeffnum <- as.numeric(as.factor(split_recs$anyeffect))-1#
#by microbe tax#
sum(   tapply(split_recs$anyeffnum[split_recs$micrtax=="MF"],split_recs$WOS.relevance.rank[split_recs$micrtax=="MF"],sum) ==0)#4#
length(unique(split_recs$WOS.relevance.rank[split_recs$micrtax=="MF"] ))#20#
sum(   tapply(split_recs$anyeffnum[split_recs$micrtax=="bacteria"],split_recs$WOS.relevance.rank[split_recs$micrtax=="bacteria"],sum) ==0)#1#
length(unique(split_recs$WOS.relevance.rank[split_recs$micrtax=="bacteria"] )) #25#
length(table(split_recs$WOS.relevance.rank[split_recs$micrloc=="multiple"])) #14#
length(unique(split_recs$WOS.relevance.rank[split_recs$micrtax=="otherfungi"] ))#18#
length(unique(split_recs$WOS.relevance.rank[split_recs$micrtax=="mixed"] ))#16#
#by phenophase#
sum(   tapply(split_recs$anyeffnum[split_recs$phentrait=="flowering time"],split_recs$WOS.relevance.rank[split_recs$phentrait=="flowering time"],sum) ==0)#43#
length(unique(split_recs$WOS.relevance.rank[split_recs$phentrait=="flowering time"]))#6#
sum(   tapply(split_recs$anyeffnum[split_recs$phentrait=="germination time"],split_recs$WOS.relevance.rank[split_recs$phentrait=="germination time"],sum) ==0)#2#
length(unique(split_recs$WOS.relevance.rank[split_recs$phentrait=="germination time"]))#19#
sum(   tapply(split_recs$anyeffnum[split_recs$phentrait=="germination prb"],split_recs$WOS.relevance.rank[split_recs$phentrait=="germination prb"],sum) ==0)#1#
length(unique(split_recs$WOS.relevance.rank[split_recs$phentrait=="germination prb"]))#26#
sum(   tapply(split_recs$anyeffnum[split_recs$phentrait=="fruiting time"],split_recs$WOS.relevance.rank[split_recs$phentrait=="fruiting time"],sum) ==0)#1#
length(unique(split_recs$WOS.relevance.rank[split_recs$phentrait=="fruiting time"]))#7#
sum(   tapply(split_recs$anyeffnum[split_recs$phentrait=="senescence time"],split_recs$WOS.relevance.rank[split_recs$phentrait=="senescence time"],sum) ==0)#1#
length(unique(split_recs$WOS.relevance.rank[split_recs$phentrait=="senescence time"]))#2#
sum(   tapply(split_recs$anyeffnum[split_recs$phentrait%in% c("phyllochron","budburst")],split_recs$WOS.relevance.rank[split_recs$phentrait %in% c("phyllochron","budburst") ],sum) ==0)#1#
length(unique(split_recs$WOS.relevance.rank[split_recs$phentrait %in% c("phyllochron","budburst") ])) #9#
##
table(split_recs$microbeNPHO)#
length(unique(split_recs$WOS.relevance.rank[split_recs$lifeform=="annual" | split_recs$lifeform=="both"]))#
length(unique(split_recs$WOS.relevance.rank[split_recs$lifeform=="perennial"]))#
#appendix S5, able of plant families#
apps5 <- cbind(names(table(split_recs$plant.family)),table(split_recs$plant.family), #
	sapply(sort(unique(split_recs$plant.family)), function(fam) #
		 length(unique(split_recs$WOS.relevance.rank[split_recs$plant.family==fam])) ),#
		sapply(sort(unique(split_recs$plant.family)), function(fam) length(which(split_recs$lifeform[split_recs$plant.family==fam]=="annual")) ),#
		sapply(sort(unique(split_recs$plant.family)), function(fam) length(which(split_recs$lifeform[split_recs$plant.family==fam]=="perennial")) ),#
		sapply(sort(unique(split_recs$plant.family)), function(fam) length(which(split_recs$lifeform[split_recs$plant.family==fam]=="both")) )#
	)#
	##
colnames(apps5) <- c("Plant Family","Number of Tests","Number of Studies","Tests with annuals","Tests with perennials","Tests with mixed life history species")#
write.csv(apps5,"AppendixS5.csv",row.names=F)	#
#
#repeat above alternately for subset data, if exclude records that could not be split: some observed effects, but are not included in model results#
split_recs_scr$anyeffnum <- as.numeric(as.factor(split_recs_scr$anyeffect))-1 ##
#
###more numbers reported in text:#
flowering$anyeffnum <- as.numeric(as.factor(flowering$anyeffect))-1#
sum(tapply(flowering$anyeffnum,flowering$WOS.relevance.rank,sum) == 0) #6#
length(tapply(flowering$anyeffnum,flowering$WOS.relevance.rank,sum))#40#
germtime$anyeffnum <- as.numeric(as.factor(germtime$anyeffect))-1#
sum(tapply(germtime$anyeffnum,germtime$WOS.relevance.rank,sum) ==0)#2 #
length(tapply(germtime$anyeffnum,germtime$WOS.relevance.rank,sum))#19#
germprb$anyeffnum <- as.numeric(as.factor(germprb$anyeffect))-1 #
sum(tapply(germprb$anyeffnum,germprb$WOS.relevance.rank,sum) ==0)#1#
length(tapply(germprb$anyeffnum,germprb$WOS.relevance.rank,sum))#26-1=25#
length(unique(c(germprb$WOS.relevance.rank, germtime$WOS.relevance.rank)))#overlap #
sapply(sort(unique(split_recs_scr$microbeNPHO)), function(z) sapply(sort(unique(split_recs_scr$micrtax)), function(k) sum(split_recs_scr$micrtax==k & split_recs_scr$microbeNPHO==z) ) )#
sapply(sort(unique(split_recs_scr$micrloc)), function(z) sapply(sort(unique(split_recs_scr$micrtax)), function(k) sum(split_recs_scr$micrtax==k & split_recs_scr$micrloc==z) ) )#
sapply(sort(unique(split_recs_scr$micrloc)), function(z) sapply(sort(unique(split_recs_scr$microbeNPHO)), function(k) sum(split_recs_scr$microbeNPHO==k & split_recs_scr$micrloc==z) ) )
nrow(split_recs)
nrow(split_recs_scr)
length(unique(split_recs_scr$WOS.rel.rank))
length(unique(split_recs_scr$WOS.relevance.rank))
length(unique(split_recs$WOS.relevance.rank))
65/69
65/74
split_recs_scr$anyeffnum <- as.numeric(as.factor(split_recs_scr$anyeffect))-1
nrow(split_recs_scr)
65/73
64/73
matrix(field=c(12,4),all = c(65,9))
data.frame(field=c(12,4),all = c(65,9))
chisq.test(data.frame(field=c(12,4),all = c(65,9)))
chisq.test(data.frame(field=c(12,4),all = c(64,8)))
table(relevant)#
table(PMo)#
table(MiP)#
table(cwos_recs$anyeffect)
colnames(cwos_recs)
cwos_recs$anyeffect
cwos_recs[,65:75]
cwos_recs[65:75,]
cwos_recs$WOS.relevance.rank[1:74]
cwos_recs$anyeffect[1:74]
cwos_recs$anyeffect[1:74] %in% unique(split_recs_scr$WOS.relevance.rank)
cwos_recs$WOS.relevance.rank[1:74] %in% unique(split_recs_scr$WOS.relevance.rank)
cwos_recs$WOS.relevance.rank[1:74] %in% unique(split_recs$WOS.relevance.rank)
table(split_recs$direction.effect.split)
which(is.na(split_recs$direction.effect.split))
split_recs[which(is.na(split_recs$direction.effect.split)),]
table(split_recs$manipulationtype)
split_recs[split_recs$manipulationtype=="observed",]
64/74
cwos_recs$WOS.relevance.rank[1:74] %in% unique(split_recs$WOS.relevance.rank[!is.na(split_recs$anyeffnum)])
13/17
chisq.test(data.frame(field=c(13,4),all = c(65,9)))
